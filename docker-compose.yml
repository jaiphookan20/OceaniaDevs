version: "3" # Specify docker-compose version

services:
  frontend:
    build:
      context: ./frontend
      args:
        - NODE_ENV=${NODE_ENV:-production}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://54.79.190.69/api
      # - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=${NODE_ENV:-production}
    ports:
      - "3000:3000"
    depends_on:
      - backend

  backend:
    build:
      context: ./backend # Set the build context to the backend directory
      dockerfile: Dockerfile # Specify the Dockerfile to use
    volumes:
      # Bind mount the entire backend directory for development
      - ./backend:/app
      # Bind mount for uploads, allowing persistence and easy access from host
      - ./backend/uploads:/app/uploads
    environment:
      # Set environment variables for the backend service
      - FLASK_APP=app.py
      - FLASK_ENV=${FLASK_ENV:-production}
      # - FLASK_ENV=development
      - DB_HOST=postgres
      #- DB_HOST=localhost
      - DB_NAME=job_board
      - DB_USER=jai
      - DB_PASSWORD=techboard
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY=${SECRET_KEY:-1234567890} # Use env variable or default
    ports:
      - "4040:4040" # Map host port 4040 to container port 4040
    depends_on:
      # Ensure database services are started before backend
      - postgres
      - redis

  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    environment:
      # Set environment variables for PostgreSQL
      POSTGRES_DB: job_board
      POSTGRES_USER: jai
      POSTGRES_PASSWORD: techboard
    volumes:
      # Use a named volume for PostgreSQL data persistence
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Map host port 5432 to container port 5432

  redis:
    image: redis:6 # Use the official Redis 6 image
    ports:
      - "6379:6379" # Map host port 6379 to container port 6379

  nginx:
    build: ./nginx # Build the nginx service using the Dockerfile in ./nginx
    ports:
      - "80:80" # Map host port 80 to container port 80
    volumes:
      # Mount the Nginx configuration file
      - ./nginx/job-board.conf:/etc/nginx/conf.d/default.conf
      # Bind mount for uploads, allowing Nginx to serve uploaded files
      - ./backend/uploads:/app/uploads
    depends_on:
      # Ensure application services are started before Nginx
      - frontend
      - backend

volumes:
  # Define a named volume for PostgreSQL data persistence
  postgres_data:
    # This volume is managed by Docker and persists across container restarts
